name: 백엔드 자동 배포 (AWS EC2)

on:
  push:
    branches:
      - main  # main 브랜치에 코드가 push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 실행될 환경

    steps:
      - name: 레포지토리 코드 가져오기
        uses: actions/checkout@v3

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Gradle 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 프로젝트 빌드 (JAR 생성), 테스트 제외
        run: ./gradlew build -x test

      - name: DockerHub 로그인
        run: echo "${{ secrets.DOCKER_USER_PW }}" | docker login -u "${{ secrets.DOCKER_USER_NAME }}" --password-stdin

      - name: 백엔드 Docker 이미지 빌드 및 DockerHub에 푸시
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USER_NAME }}/stock-be:latest \
            --push .

      # EC2에 접속 후 Docker 이미지 pull 및 배포
      - name: AWS EC2에 ssh 접속 후 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_IP }}
          port: 22
          username: ubuntu
          key: ${{ secrets.AWS_KEY }}
          script: |
            echo "AWS 연결 중..."
            
            # 1. .env 파일 생성

            cat <<'EOF' > /home/ubuntu/.env
            NAVER_CLIENT_ID='${{ secrets.NAVER_CLIENT_ID }}'
            NAVER_CLIENT_SECRET='${{ secrets.NAVER_CLIENT_SECRET }}'
            MYSQL_URL='${{ secrets.MYSQL_URL }}'
            MYSQL_USERNAME='${{ secrets.MYSQL_USERNAME }}'
            MYSQL_PASSWORD='${{ secrets.MYSQL_PASSWORD }}'
            CORS_ALLOWED_ORIGINS='${{ secrets.CORS_ALLOWED_ORIGINS }}'
            EOF


            # 2. Docker 이미지 최신 버전 pull
            docker pull ${{ secrets.DOCKER_USER_NAME }}/stock-be:latest

            # 3. 서비스 재시작
            cd /home/ubuntu
            docker-compose down
            docker-compose up -d
            
            echo "배포 완료"
